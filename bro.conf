#BRO Logstash Parser for VERSION 2.4.1 sent via SYSLOG
filter {
    # bro_app_stats ######################
      if "bro_app" in [message]{
        mutate{
            add_tag => ["bro_app_stats"]
        }
        grok {
          match => { "message" => ["<(?:%{BASE10NUM})>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_host} (?:%{BASE10NUM}) (?<bro_timestamp>%{TIMESTAMP_ISO8601}) (?<bro_hostname>%{HOSTNAME}) (?<bro_log_type>%{USERNAME}) (?:(<(?:%{BASE10NUM})>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_host} (?:%{BASE10NUM}) (?<bro_timestamp>%{TIMESTAMP_ISO8601}) (?<bro_hostname>%{HOSTNAME}) (?<bro_log_type>%{USERNAME}) (?:(- - - )) ))(?<ts>(.*?))\t(?<ts_delta>(.*?))\t(?<app>(.*?))\t(?<uniq_hosts>(.*?))\t(?<hits>(.*?))\t(?<bytes>(.*))"]
          }
        }
      }
    # bro_conn ######################
      if "bro_conn" in [message] {
        mutate{
        add_tag => ["bro_conn"]
      }
        grok {
            match => {
                "message" => ["<(?:%{BASE10NUM})>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_host} (?:%{BASE10NUM}) (?<bro_timestamp>%{TIMESTAMP_ISO8601}) (?<bro_hostname>%{HOSTNAME}) (?<bro_log_type>%{USERNAME}) (?:(- - -)) (?<ts>(.*?))\t(?<uid>(.*?))\t(?<id_orig_h>(.*?))\t(?<id_orig_p>(.*?))\t(?<id_resp_h>(.*?))\t(?<id_resp_p>(.*?))\t(?<proto>(.*?))\t(?<service>(.*?))\t(?<duration>(.*?))\t(?<orig_bytes>(.*?))\t(?<resp_bytes>(.*?))\t(?<conn_state>(.*?))\t(?<local_orig>(.*?))\t(?<missed_bytes>(.*?))\t(?<history>(.*?))\t(?<orig_pkts>(.*?))\t(?<orig_ip_bytes>(.*?))\t(?<resp_pkts>(.*?))\t(?<resp_ip_bytes>(.*?))\t(?<tunnel_parents>(.*?))\t(?<orig_cc>(.*?))\t(?<resp_cc>(.*?))\t(?<sensorname>(.*))","<(?:%{BASE10NUM})>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_host} (?:%{BASE10NUM}) (?<bro_timestamp>%{TIMESTAMP_ISO8601}) (?<bro_hostname>%{HOSTNAME}) (?<bro_log_type>%{USERNAME}) (?:(- - -)) (?<ts>(.*?))\t(?<uid>(.*?))\t(?<id_orig_h>(.*?))\t(?<id_orig_p>(.*?))\t(?<id_resp_h>(.*?))\t(?<id_resp_p>(.*?))\t(?<proto>(.*?))\t(?<service>(.*?))\t(?<duration>(.*?))\t(?<orig_bytes>(.*?))\t(?<resp_bytes>(.*?))\t(?<conn_state>(.*?))\t(?<local_orig>(.*?))\t(?<missed_bytes>(.*?))\t(?<history>(.*?))\t(?<orig_pkts>(.*?))\t(?<orig_ip_bytes>(.*?))\t(?<resp_pkts>(.*?))\t(?<resp_ip_bytes>(.*?))\t(%{NOTSPACE:tunnel_parents})"]
            }
        }
      }
    # bro_notice ######################
      if "bro_notice" in [message]{
        mutate{
        add_tag => ["bro_notice"]
        }
        grok {
          match => { "message" => ["<(?:%{BASE10NUM})>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_host} (?:%{BASE10NUM}) (?<bro_timestamp>%{TIMESTAMP_ISO8601}) (?<bro_hostname>%{HOSTNAME}) (?<bro_log_type>%{USERNAME}) (?:(- - -)) (?<ts>(.*?))\t(?<uid>(.*?))\t(?<id_orig_h>(.*?))\t(?<id_orig_p>(.*?))\t(?<id_resp_h>(.*?))\t(?<id_resp_p>(.*?))\t(?<fuid>(.*?))\t(?<file_mime_type>(.*?))\t(?<file_desc>(.*?))\t(?<proto>(.*?))\t(?<note>(.*?))\t(?<msg>(.*?))\t(?<sub>(.*?))\t(?<src>(.*?))\t(?<dst>(.*?))\t(?<p>(.*?))\t(?<n>(.*?))\t(?<peer_descr>(.*?))\t(?<actions>(.*?))\t(?<suppress_for>(.*?))\t(?<dropped>(.*?))\t(?<remote_location.country_code>(.*?))\t(?<remote_location.region>(.*?))\t(?<remote_location.city>(.*?))\t(?<remote_location.latitude>(.*?))\t(?<remote_location.longitude>(.*))"]
          }
        }
      }
    # bro_dhcp ######################
      if "bro_dhcp" in [message] {
        mutate{
          add_tag => ["bro_dhcp"]
        }
        grok {
          match => { "message" => ["<(?:%{BASE10NUM})>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_host} (?:%{BASE10NUM}) (?<bro_timestamp>%{TIMESTAMP_ISO8601}) (?<bro_hostname>%{HOSTNAME}) (?<bro_log_type>%{USERNAME}) (?:(- - -)) (?<ts>(.*?))\t(?<uid>(.*?))\t(?<id_orig_h>(.*?))\t(?<id_orig_p>(.*?))\t(?<id_resp_h>(.*?))\t(?<id_resp_p>(.*?))\t(?<mac>(.*?))\t(?<assigned_ip>(.*?))\t(?<lease_time>(.*?))\t(?<trans_id>(.*))"]
          }
        }
      }
    # bro_dns ######################
      if "bro_dns" in [message] {
        mutate{
          add_tag => ["bro_dns"]
        }
        grok {
          match => { "message" => ["<(?:%{BASE10NUM})>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_host} (?:%{BASE10NUM}) (?<bro_timestamp>%{TIMESTAMP_ISO8601}) (?<bro_hostname>%{HOSTNAME}) (?<bro_log_type>%{USERNAME}) (?:(- - -)) (?<ts>(.*?))\t(?<uid>(.*?))\t(?<id_orig_h>(.*?))\t(?<id_orig_p>(.*?))\t(?<id_resp_h>(.*?))\t(?<id_resp_p>(.*?))\t(?<proto>(.*?))\t(?<trans_id>(.*?))\t(?<query>(.*?))\t(?<qclass>(.*?))\t(?<qclass_name>(.*?))\t(?<qtype>(.*?))\t(?<qtype_name>(.*?))\t(?<rcode>(.*?))\t(?<rcode_name>(.*?))\t(?<AA>(.*?))\t(?<TC>(.*?))\t(?<RD>(.*?))\t(?<RA>(.*?))\t(?<Z>(.*?))\t(?<answers>(.*?))\t(?<TTLs>(.*?))\t(?<rejected>(.*))"]
          }
        }
      }
    # bro_software ######################
      if "bro_software" in [message]{
        mutate{
          add_tag => ["bro_software"]
        }
        grok {
          match => {"message" => ["<(?:%{BASE10NUM})>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_host} (?:%{BASE10NUM}) (?<bro_timestamp>%{TIMESTAMP_ISO8601}) (?<bro_hostname>%{HOSTNAME}) (?<bro_log_type>%{USERNAME}) (?:(<(?:%{BASE10NUM})>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_host} (?:%{BASE10NUM}) (?<bro_timestamp>%{TIMESTAMP_ISO8601}) (?<bro_hostname>%{HOSTNAME}) (?<bro_log_type>%{USERNAME}) (?:(- - - )) ))(?<ts>(.*?))\t(?<bro_host>(.*?))\t(?<host_p>(.*?))\t(?<software_type>(.*?))\t(?<name>(.*?))\t(?<version.major>(.*?))\t(?<version.minor>(.*?))\t(?<version.minor2>(.*?))\t(?<version.minor3>(.*?))\t(?<version.addl>(.*?))\t(?<unparsed_version>(.*))"]
          }
        }
      }
    # bro_dpd ######################
      if "bro_dpd" in [message]{
        mutate{
          add_tag => ["bro_dpd"]
        }
        grok {
          match => { "message" => ["<(?:%{BASE10NUM})>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_host} (?:%{BASE10NUM}) (?<bro_timestamp>%{TIMESTAMP_ISO8601}) (?<bro_hostname>%{HOSTNAME}) (?<bro_log_type>%{USERNAME}) (?:(- - -)) (?<ts>(.*?))\t(?<uid>(.*?))\t(?<id_orig_h>(.*?))\t(?<id_orig_p>(.*?))\t(?<id_resp_h>(.*?))\t(?<id_resp_p>(.*?))\t(?<proto>(.*?))\t(?<analyzer>(.*?))\t(?<failure_reason>(.*))"]
          }
        }
      }
    # bro_files ######################
      if "bro_files" in [message] {
        mutate{
          add_tag => ["bro_files"]
        }
        grok {
          match => { "message" => ["<(?:%{BASE10NUM})>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_host} (?:%{BASE10NUM}) (?<bro_timestamp>%{TIMESTAMP_ISO8601}) (?<bro_hostname>%{HOSTNAME}) (?<bro_log_type>%{USERNAME}) (?:(- - -)) (?<ts>(.*?))\t(?<fuid>(.*?))\t(?<tx_hosts>(.*?))\t(?<rx_hosts>(.*?))\t(?<conn_uids>(.*?))\t(?<source>(.*?))\t(?<depth>(.*?))\t(?<analyzers>(.*?))\t(?<mime_type>(.*?))\t(?<filename>(.*?))\t(?<duration>(.*?))\t(?<local_orig>(.*?))\t(?<is_orig>(.*?))\t(?<seen_bytes>(.*?))\t(?<total_bytes>(.*?))\t(?<missing_bytes>(.*?))\t(?<overflow_bytes>(.*?))\t(?<timedout>(.*?))\t(?<parent_fuid>(.*?))\t(?<md5>(.*?))\t(?<sha1>(.*?))\t(?<sha256>(.*?))\t(?<extracted>(.*))"]
          }
        }
      }
    # bro_http ######################
      if "bro_http" in [message] {
        mutate{
          add_tag => ["bro_http"]
        }
        grok {
          match => { "message" => ["<(?:%{BASE10NUM})>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_host} (?:%{BASE10NUM}) (?<bro_timestamp>%{TIMESTAMP_ISO8601}) (?<bro_hostname>%{HOSTNAME}) (?<bro_log_type>%{USERNAME}) (?:(- - -)) (?<ts>(.*?))\t(?<uid>(.*?))\t(?<id_orig_h>(.*?))\t(?<id_orig_p>(.*?))\t(?<id_resp_h>(.*?))\t(?<id_resp_p>(.*?))\t(?<trans_depth>(.*?))\t(?<method>(.*?))\t(?<bro_host>(.*?))\t(?<uri>(.*?))\t(?<referrer>(.*?))\t(?<user_agent>(.*?))\t(?<request_body_len>(.*?))\t(?<response_body_len>(.*?))\t(?<status_code>(.*?))\t(?<status_msg>(.*?))\t(?<info_code>(.*?))\t(?<info_msg>(.*?))\t(?<filename>(.*?))\t(?<http_tags>(.*?))\t(?<username>(.*?))\t(?<password>(.*?))\t(?<proxied>(.*?))\t(?<orig_fuids>(.*?))\t(?<orig_mime_types>(.*?))\t(?<resp_fuids>(.*?))\t(?<resp_mime_types>(.*))"]
          }
        }
      }
    # bro_known_certs ######################
      if "bro_known_certs" in [message]{
        mutate{
          add_tag => ["bro_known_certs"]
        }
        grok {
          match => { "message" => ["<(?:%{BASE10NUM})>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_host} (?:%{BASE10NUM}) (?<bro_timestamp>%{TIMESTAMP_ISO8601}) (?<bro_hostname>%{HOSTNAME}) (?<bro_log_type>%{USERNAME}) (?:(- - -)) (?<ts>(.*?))\t(?<bro_host>(.*?))\t(?<port_num>(.*?))\t(?<subject>(.*?))\t(?<issuer_subject>(.*?))\t(?<serial>(.*))"]
          }
        }
      }
    # bro_known_hosts ######################
      if [type] == "bro_known_hosts" {
        mutate{
          add_tag => ["bro_known_hosts"]
        }
        grok {
          match => { "message" => ["<(?:%{BASE10NUM})>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_host} (?:%{BASE10NUM}) (?<bro_timestamp>%{TIMESTAMP_ISO8601}) (?<bro_hostname>%{HOSTNAME}) (?<bro_log_type>%{USERNAME}) (?:(- - -)) (?<ts>(.*?))\t(?<bro_host>(.*))"]
          }
        }
      }
    # bro_known_services ######################
      if "bro_known_services" in [message] {
        mutate{
          add_tag => ["bro_known_services"]
        }
        grok {
          match => { "message" => ["<(?:%{BASE10NUM})>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_host} (?:%{BASE10NUM}) (?<bro_timestamp>%{TIMESTAMP_ISO8601}) (?<bro_hostname>%{HOSTNAME}) (?<bro_log_type>%{USERNAME}) (?:(- - -)) (?<ts>(.*?))\t(?<bro_host>(.*?))\t(?<port_num>(.*?))\t(?<port_proto>(.*?))\t(?<service>(.*))"]
          }
        }
      }
    # bro_ssh ######################
      if "bro_ssh" in [message] {
        mutate{
          add_tag => ["bro_ssh"]
        }
        grok {
          match => { "message" => ["<(?:%{BASE10NUM})>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_host} (?:%{BASE10NUM}) (?<bro_timestamp>%{TIMESTAMP_ISO8601}) (?<bro_hostname>%{HOSTNAME}) (?<bro_log_type>%{USERNAME}) (?:(- - -)) (?<ts>(.*?))\t(?<uid>(.*?))\t(?<id_orig_h>(.*?))\t(?<id_orig_p>(.*?))\t(?<id_resp_h>(.*?))\t(?<id_resp_p>(.*?))\t(?<status>(.*?))\t(?<direction>(.*?))\t(?<client>(.*?))\t(?<server>(.*?))\t(?<remote_location.country_code>(.*?))\t(?<remote_location.region>(.*?))\t(?<remote_location.city>(.*?))\t(?<remote_location.latitude>(.*?))\t(?<remote_location.longitude>(.*))"]
          }
        }
      }
    # bro_ssl ######################
      if "bro_ssl" in [message]{
        mutate{
          add_tag => ["bro_ssl"]
        }
        grok {
          match => { "message" => ["<(?:%{BASE10NUM})>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_host} (?:%{BASE10NUM}) (?<bro_timestamp>%{TIMESTAMP_ISO8601}) (?<bro_hostname>%{HOSTNAME}) (?<bro_log_type>%{USERNAME}) (?:(- - -)) (?<ts>(.*?))\t(?<uid>(.*?))\t(?<id_orig_h>(.*?))\t(?<id_orig_p>(.*?))\t(?<id_resp_h>(.*?))\t(?<id_resp_p>(.*?))\t(?<version>(.*?))\t(?<cipher>(.*?))\t(?<server_name>(.*?))\t(?<session_id>(.*?))\t(?<subject>(.*?))\t(?<issuer_subject>(.*?))\t(?<not_valid_before>(.*?))\t(?<not_valid_after>(.*?))\t(?<last_alert>(.*?))\t(?<client_subject>(.*?))\t(?<client_issuer_subject>(.*?))\t(?<cert_hash>(.*?))\t(?<validation_status>(.*))"]
          }
        }
      }
    # bro_weird ######################
    if "bro_weird" in [message] {
        mutate{
          add_tag => ["bro_weird"]
        }
        grok {
            match => { "message" => ["<(?:%{BASE10NUM})>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_host} (?:%{BASE10NUM}) (?<bro_timestamp>%{TIMESTAMP_ISO8601}) (?<bro_hostname>%{HOSTNAME}) (?<bro_log_type>%{USERNAME}) (?:(- - -)) (?<ts>(.*?))\t(?<uid>(.*?))\t(?<id_orig_h>(.*?))\t(?<id_orig_p>(.*?))\t(?<id_resp_h>(.*?))\t(?<id_resp_p>(.*?))\t(?<name>(.*?))\t(?<addl>(.*?))\t(?<notice>(.*?))\t(?<peer>(.*))"]
            }
            }
    }
    # bro_x509 #######################
    if "bro_x509" in [message] {
        csv {
          #x509.log:#fields ts id certificate.version certificate.serial
          #certificate.subject certificate.issuer
          #certificate.not_valid_before certificate.not_valid_after
          #certificate.key_alg certificate.sig_alg certificate.key_type
          #certificate.key_length certificate.exponent certificate.curve
          #san.dns san.uri san.email san.ip basic_constraints.ca
          #basic_constraints.path_len
          columns =>
["ts","id","certificate.version","certificate.serial","certificate.subject","icertificate.issuer","certificate.not_valid_before","certificate.not_valid_after","certificate.key_alg","certificate.sig_alg","certificate.key_type","certificate.key_length","certificate.exponent","certificate.curve","san.dns","san.uri","san.email","san.ip","basic_constraints.ca","basic_constraints.path_len"]
          #If you use a custom delimiter, change the following value in
          #between the quotes to your delimiter. Otherwise, leave the
          #next line alone.
          separator => " "
        }
        #Let's convert our timestamp into the 'ts' field, so we can use
        #Kibana features natively
        date {
          match => [ "ts", "ISO8601" ]
        }
      }
    if "bro_intel" in [message] {
      mutate{
        add_tag => ["bro_intel"]
      }
      grok {
        match => { "message" => ["<(?:%{BASE10NUM})>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_host} (?:%{BASE10NUM}) (?<bro_timestamp>%{TIMESTAMP_ISO8601}) (?<bro_hostname>%{HOSTNAME}) (?<bro_log_type>%{USERNAME}) (?:(- - - )) (?<ts>(.*?))\t%{DATA:uid}\t(?<id_orig_h>(.*?))\t(?<id_orig_p>(.*?))\t(?<id_resp_h>(.*?))\t(?<id_resp_p>(.*?))\t%{DATA:fuid}\t%{DATA:file_mime_type}\t%{DATA:file_desc}\t(?<seen.indicator>(.*?))\t(?<seen.indicator_type>(.*?))\t(?<seen.where>(.*?))\t%{NOTSPACE:sources}"]
        }
     }
   }
  date {
    match => [ "ts", "ISO8601" ]
  }
}
filter {
  if "bro" in [tags] {
    if [id_orig_h] {
      mutate {
        add_field => { "senderbase_lookup" => "http://www.senderbase.org/lookup/?search_string=%{id_orig_h}"
"CBL_lookup" => "http://cbl.abuseat.org/lookup.cgi?ip=%{id_orig_h}"
 "Spamhaus_lookup" => "http://www.spamhaus.org/query/bl?ip=%{id_orig_h}" }
      }
   }
    mutate {
      convert => { "id_orig_p"=> "integer" }
      convert => { "id_resp_p"=> "integer" }
      convert => { "orig_bytes"=> "integer" }
      convert => { "resp_bytes"=> "integer" }
      convert => { "missed_bytes"=> "integer" }
      convert => { "orig_pkts"=> "integer" }
      convert => { "orig_ip_bytes"=> "integer" }
      convert => { "resp_pkts"=> "integer" }
      convert => { "resp_ip_bytes"=> "integer" }
    }
  }
}
filter {
  if "bro_conn" in [tags] {
    #The following makes use of the translate filter (stash contrib) to
    #convert conn_state into human text. Saves having to look up values
    #for packet introspection
    translate {
      field => "conn_state"
      destination => "conn_state_full"
      dictionary => [
        "S0", "Connection attempt seen, no reply",
        "S1", "Connection established, not terminated",
        "S2", "Connection established and close attempt by originator
seen (but no reply from responder)",
        "S3", "Connection established and close attempt by responder
seen (but no reply from originator)",
        "SF", "Normal SYN/FIN completion",
        "REJ", "Connection attempt rejected",
        "RSTO", "Connection established, originator aborted (sent a
RST)",
        "RSTR", "Established, responder aborted",
        "RSTOS0", "Originator sent a SYN followed by a RST, we never saw
a SYN-ACK from the responder",
        "RSTRH", "Responder sent a SYN ACK followed by a RST, we never
saw a SYN from the (purported) originator",
        "SH", "Originator sent a SYN followed by a FIN, we never saw a
SYN ACK from the responder (hence the connection was 'half' open)",
        "SHR", "Responder sent a SYN ACK followed by a FIN, we never saw
a SYN from the originator",
        "OTH", "No SYN seen, just midstream traffic (a 'partial
connection' that was not later closed)"
      ]
    }
  }
}
# Resolve @source_host to FQDN if possible if missing for some types of
# ging using source_host_ip from above
filter {
  if [id_orig_h] {
    if ![id_orig_h-resolved] {
      mutate {
        add_field => { "id_orig_h-resolved"=> "%{id_orig_h}" }
      }
      dns {
        reverse => [ "id_orig_h-resolved" ]
        action => "replace"
      }
    }
  }
}
filter {
  if [id_resp_h] {
    if ![id_resp_h-resolved] {
      mutate {
        add_field => { "id_resp_h-resolved"=> "%{id_resp_h}" }
      }
      dns {
        reverse => [ "id_resp_h-resolved" ]
        action => "replace"
      }
    }
  }
}
