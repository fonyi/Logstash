#Sophos SEC Logstash parser for Version 2.4.1 send via Logbeat
filter {
  if "sophos" in [tags]{
   mutate{
    add_tag => ["sophos_av"]
   }
   grok {
     match => {"message" => ["^InsertedAt=%{DATA:ts}; EventID=%{INT:sophos_event_id}; EventTime=%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{HOUR}:%{MINUTE}:%{SECOND}; EventTypeID=%{DATA}; EventType=%{DATA:event_type}; Name=%{DATA}; ReportingName=%{DATA}; UserName=%{DATA:src_user}; ActionID=%{DATA}; Action=%{DATA:action}; SubTypeID=%{DATA}; SubType=%{DATA:sub_type}; RuleID=%{DATA:rule_id}; BlockedSite=%{DATA:url_or_filename}; ReferringURL=%{DATA:referring_url}; ComputerName=%{DATA:computer_name}; ComputerDomain=%{DATA:computer_domain}; ComputerIPAddress=%{IP:src_ip}%{GREEDYDATA:unparsed_data}"]}
     match => {"message" => ["^InsertedAt=%{DATA:ts}; EventID=%{INT:sophos_event_id}; EventTime=%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{HOUR}:%{MINUTE}:%{SECOND}; EventTypeID=%{DATA}; EventType=%{DATA:event_type}; Name=%{DATA}; ReportingName=%{DATA}; UserName=%{DATA:src_user}; ActionID=%{DATA}; Action=%{DATA:action}; SubTypeID=%{DATA}; SubType=%{DATA:sub_type}; RuleID=%{DATA:rule_id}; BlockedSite=%{DATA:url_or_filename}; ReferringURL=%{DATA:referring_url}; ComputerName=%{DATA:computer_name}; ComputerDomain=%{DATA:computer_domain}; ComputerIPAddress=$"]}
     match => {"message" => ["^InsertedAt=%{DATA:ts}; EventID=%{INT:sophos_event_id}; EventTime=%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{HOUR}:%{MINUTE}:%{SECOND}; ActionTakenID=%{DATA}; ActionTaken=%{DATA:action}; UserName=%{DATA:src_user}; ScannerTypeID=%{DATA}; ScannerType=%{DATA:scanner_type}; StatusID=%{DATA}; Status=%{DATA:status}; ThreatTypeID=%{DATA}; ThreatType=%{DATA:threat_type}; ThreatName=%{DATA:threat_id}; FullFilePath=%{DATA:url_or_filename}; ComputerName=%{DATA:computer_name}; ComputerDomain=%{DATA:computer_domain}; ComputerIPAddress=%{IP:src_ip}%{GREEDYDATA:unparsed_data}"]}
     match => {"message" => ["^InsertedAt=%{DATA:ts}; EventID=%{INT:sophos_event_id}; EventTime=%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{HOUR}:%{MINUTE}:%{SECOND}; ActionTakenID=%{DATA}; ActionTaken=%{DATA:action}; UserName=%{DATA:src_user}; ScannerTypeID=%{DATA}; ScannerType=%{DATA:scanner_type}; StatusID=%{DATA}; Status=%{DATA:status}; ThreatTypeID=%{DATA}; ThreatType=%{DATA:threat_type}; ThreatName=%{DATA:threat_id}; FullFilePath=%{DATA:url_or_filename}; ComputerName=%{DATA:computer_name}; ComputerDomain=%{DATA:computer_domain}; ComputerIPAddress=$"]}
     match => {"message" => ["^InsertedAt=%{DATA:ts}; EventID=%{INT:sophos_event_id}; EventTime=%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{HOUR}:%{MINUTE}:%{SECOND}; EventTypeID=%{DATA}; EventType=%{DATA:event_type}; Name=%{DATA}; ReportingName=%{DATA}; UserName=%{DATA:src_user}; ActionID=%{DATA}; Action=%{DATA:action}; ScanTypeID=%{DATA:scan_type_id}; ScanType=%{DATA:scan_type}; SubTypeID=%{DATA}; SubType=%{DATA:sub_type}; ComputerName=%{DATA:computer_name}; ComputerDomain=%{DATA:computer_domain}; ComputerIPAddress=%{IP:src_ip}%{GREEDYDATA:unparsed_data}"]}
     add_field => [ "received_at", "%{@timestamp}" ]
     add_field => [ "received_from", "%{host}" ]
    }
    # If the src_ip field doesn't exist (some Sophos logs) and it's an alert
    # we're parsing (no _grokparsefailure), put in a placeholder IP of 0.0.0.0
    if ( ![src_ip] and "_grokparsefailure" not in [tags] ) {
      mutate { add_field => { "src_ip" => "0.0.0.0" } }
    }


    # If the src_user field doesn't exist and it's an alert we're parsing
    # (no _grokparsefailure), put in a placeholder name of "unknown"
    if ( ![src_user] and "_grokparsefailure" not in [tags] ) {
      mutate { add_field => { "src_user" => "unknown" } }
    }


    # If the dst_user field doesn't exist and it's an alert we're parsing
    # (no _grokparsefailure), put in a placeholder name of "unknown"
    if ( ![dst_user] and "_grokparsefailure" not in [tags] ) {
      mutate { add_field => { "dst_user" => "unknown" } }
    }


    # Normalize "AD\foo" and "ad\foo" user names
    mutate { lowercase => [ "src_user" ] }
    mutate { lowercase => [ "dst_user" ] }


    syslog_pri { }


    date {
      match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss", "yyyy-MM-dd HH:mm:ss", "ISO8601" ]
      # move this to a per-host statement
      timezone => "America/Los_Angeles"
      target => [ "@timestamp" ]
    }


    date {
      match => [ "generation_timestamp", "yyyy/MM/dd HH:mm:ss" ]
      # move this to a per-host statement
      timezone => "America/Los_Angeles"
      target => [ "@timestamp" ]
    }


    date {
      match => [ "start_time", "yyyy-MM-dd HH:mm:ss.SSSSSSZ" ]
      #timezone => "UTC"
      #timezone => "America/Los_Angeles"
      target => [ "@timestamp" ]
    }


    date {
      match => [ "stm_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
      timezone => "UTC"
      target => [ "@timestamp" ]
    }
   }
  }
